package net.guildcraft.whitelist;

import java.io.File;
import java.io.IOException;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.configuration.InvalidConfigurationException;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.event.Listener;
import org.bukkit.plugin.java.JavaPlugin;

public class Main extends JavaPlugin implements Listener {
    private static Main instance;
	
	
	public void onEnable() {
        instance = this;
        new Lists();
        GenConfig();
		Registery();
		createWhitelistFile();
		getStatus();
		Converter();
        Bukkit.getConsoleSender().sendMessage(ChatColor.AQUA + "[GCWhitelist] Plugin enabled successfully");
	}
	
	public void onDisable() {
        Bukkit.getConsoleSender().sendMessage(ChatColor.AQUA + "[GCWhitelist] Plugin disabled successfully");
		
	}
	
	public void Registery() {
        getCommand("whitelist").setExecutor(new WhitelistCommand());
        Bukkit.getPluginManager().registerEvents(new Events(), this);
		
	}
	
	public void getStatus() {
		if(Main.getInstance().getConfig().getBoolean("whitelist-status") == true) {
			Lists.getLists().whitelist = true;
		}
	}
	
	public void Converter() {
		Main.getInstance().getWhitelist().getKeys(false).forEach(player -> {
			if (Main.getInstance().getWhitelist().getBoolean(player+".is-whitelisted") == true);
			Lists.getLists().players.add(player);
			});
	}
	
    public static Main getInstance() {
        return instance;

    }
    
    // Main Config Generation Manager
    private File cFile;
    private FileConfiguration cConfig;
    
    private void GenConfig() {
        cFile = new File(getDataFolder(), "config.yml");
        if (!cFile.exists()) {
            cFile.getParentFile().mkdirs();
            saveDefaultConfig();
        }

        cConfig= new YamlConfiguration();
        try {
            cConfig.load(cFile);
        } catch (IOException | InvalidConfigurationException e) {
            e.printStackTrace();
        }
    }
    
    
    //Whitelist File Manager
    
    public File WhitelistFile;
    public FileConfiguration customConfig;

    public FileConfiguration getWhitelist() {
        return this.customConfig;
    }

    public void reloadWhitelist() {
        customConfig = YamlConfiguration.loadConfiguration(WhitelistFile);
        Bukkit.getConsoleSender().sendMessage(ChatColor.AQUA + "[GCWhitelist] The plugin files were reloaded successfully");
    }

    public void saveWhitelist() {
        try {
            customConfig.save(WhitelistFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public void clearWhitelist() {
        Bukkit.getConsoleSender().sendMessage(ChatColor.AQUA + "[GCWhitelist] Clearing whitelisted players data");
    	File whitelist = new File(getDataFolder(), "whitelist.yml");
    	whitelist.delete();
    	createWhitelistFile();
    	Lists.getLists().players.clear();
    }

    private void createWhitelistFile() {
        WhitelistFile = new File(getDataFolder(), "whitelist.yml");
        if (!WhitelistFile.exists()) {
            WhitelistFile.getParentFile().mkdirs();
            Bukkit.getConsoleSender().sendMessage(ChatColor.AQUA + "[GCWhitelist] whitelist.yml was created successfully");
            try {
                WhitelistFile.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        customConfig = new YamlConfiguration();
        try {  
            customConfig.load(WhitelistFile);
        } catch (IOException | InvalidConfigurationException e) {
            e.printStackTrace();
        }
    }

}
